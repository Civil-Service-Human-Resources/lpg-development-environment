version: '3.9'
services:

  # frontend
  lpg-management:
    # container_name: lpg-management
    env_file:
      - ./env/lpg-management.env
    depends_on: 
      - identity
      - redis
      - learning-catalogue
      - civil-servant-registry
      - report-service
    build: 
      context: apps/lpg-management
    command: npm start
    ports:
      - 3005:3005

  lpg-services:
    # container_name: lpg-services
    env_file:
      - ./env/lpg-services.env
    depends_on: 
      - identity
      - civil-servant-registry
      - redis
      - lpg-management
      - learner-record
      - learning-catalogue
    build:
      context: apps/lpg-services
    command: npm run start:ui
    ports:
      - 3001:3001
      - 9229:9229

  identity-management:
    # container_name: identity-management
    env_file:
      - ./env/identity-management.env
    depends_on: 
      - mysql
      - identity
      - learner-record
      - civil-servant-registry
      - notification-service
    build:
      context: apps/identity-management
    ports:
      - 8081:8081
    command: java -jar /data/app.jar

  # CSHR
  identity:
    env_file:
      - ./env/identity.env
    depends_on: 
      - mysql
      # - civil-servant-registry
    build:
      context: apps/identity-service
      dockerfile: Dockerfile.dev
      target: develop
    ports:
      - 8080:8080
      - 8090:8090

  learner-record:
    # container_name: learner-record
    env_file:
      - ./env/learner-record.env  
    build:
      context: apps/lpg-learner-record
      dockerfile: Dockerfile.dev
      target: develop
    depends_on:
      # - civil-servant-registry
      - identity
      # - learning-catalogue
      - mysql
    ports:
      - 9000:9000
      - 9010:9010
    volumes:
      - /apps/lpg-learner-record/src:/workspace/app/src

  learning-catalogue:
    # container_name: learning-catalogue
    env_file:
      - ./env/learning-catalogue.env
    build: 
      context: apps/lpg-learning-catalogue
      dockerfile: Dockerfile.dev
      target: develop
    depends_on:
      - identity
      - elasticsearch
    ports:
      - 9001:9001
      - 9091:9091

  civil-servant-registry:
    # container_name: civil-servant-registry
    env_file:
      - ./env/civil-servant-registry.env
    build:
      context: apps/civil-servant-registry-service
      dockerfile: Dockerfile.dev
      target: develop
    depends_on: 
      - mysql
      - identity
    ports:
      - 9002:9002
      - 9012:9012

  report-service:
    # container_name: report-service
    env_file:
      - ./env/report-service.env
    build:
      context: apps/lpg-report-service
      dockerfile: Dockerfile.dev
      target: develop
    depends_on:
      - identity
      - learner-record
    ports:
      - 9004:9004
      - 9014:9014

  notification-service:
    # container_name: notification-service
    env_file:
      - ./env/notification-service.env
    build: 
      context: apps/notification-service
      dockerfile: Dockerfile.dev
      target: develop
    depends_on:
      - identity
    ports:
      - 9006:9006
      - 9015:9015
  # /CSHR

  rustici-engine:
    networks:
      - network
    image: lpgregistry.azurecr.io/rustici-engine/test:idt-develop
    env_file:
      - ./env/rustici-engine.env
    depends_on:
      - rustici_mysql
      - azurite
      - nginx
      # - csl-service
    ports:
      - 3000:8080
    # volumes:
    #   - ./config/RusticiEngineSettings.properties:/usr/local/tomcat/lib/RusticiEngineSettings.properties

  # # Data
  elasticsearch:
    # container_name: elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:8.4.3
    environment:
    - network.bind_host=0.0.0.0
    - xpack.security.enabled=false
    ports:
      - 9200:9200
      - 9300:9300
    command: 'elasticsearch -E cluster.name=local -E discovery.type=single-node'

  redis:
    # container_name: redis
    image: redis@sha256:3446883dfe13ab3db67433aace0e72d8cd669c528e60c617c42d6c697f0fa41f
    ports:
      - 6379:6379

  azurite:
    networks:
      - network
    depends_on:
      - nginx
    image: mcr.microsoft.com/azure-storage/azurite
    command: "azurite --loose --blobHost 0.0.0.0 --blobPort 9100 --queueHost 0.0.0.0 --location /workspace --debug /workspace/debug.log"
    ports:
      - 9100:9100

  setup-azurite:
    networks:
      - network
    depends_on:
      - azurite
    build: 
      context: ./setup_azure_storage
      dockerfile: Dockerfile

  mysql:
    # container_name: mysql
    image: mysql:5.7.28
    volumes:
      - dbdata:/var/lib/mysql
      - ./mysql:/tmp/database
    ports:
      - 3306:3306
    command: mysqld --init-file="/tmp/database/setup.sql"
    environment: 
      - MYSQL_ROOT_PASSWORD=my-secret-pw

  rustici_mysql:
    # container_name: mysql
    networks:
      - network
    image: mysql:8.0
    volumes:
      - rustici_dbdata:/var/lib/mysql
      - ./mysql:/tmp/database
    ports:
      - 3307:3306
    command: mysqld --init-file="/tmp/database/rustici_setup.sql"
    environment: 
      - MYSQL_ROOT_PASSWORD=my-secret-pw

  nginx:
    container_name: nginx
    networks:
        network:
          aliases:
            - csl.local
    image: nginx:stable-alpine
    restart: always
    ports:
      - 80:80
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf

   #/Data

volumes:
  dbdata:
  rustici_dbdata:

networks:
  network:
    name: network